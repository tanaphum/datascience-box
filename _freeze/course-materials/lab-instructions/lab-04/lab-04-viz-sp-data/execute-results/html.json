{
  "hash": "5d15c94e3dc59c719efdcc61a5e2ea58",
  "result": {
    "markdown": "---\ntitle: \"Lab 04 - La Quinta is Spanish for next to Denny's, Pt. 1\"\nsubtitle: \"Visualizing spatial data\"\noutput: \n  tufte::tufte_html:\n    tufte_variant: \"envisioned\"\n    highlight: pygments\n    css: ../lab.css\nlink-citations: true\n---\n\n\n\n::: {.cell fig.margin='true'}\n\n:::\n\n\nHave you ever taken a road trip in the US and thought to yourself \"I wonder what La Quinta means\".\nWell, the late comedian [Mitch Hedberg](https://en.wikipedia.org/wiki/Mitch_Hedberg) thinks it's Spanish for *next to Denny's*.\n\nIf you're not familiar with these two establishments, [Denny's](https://www.dennys.com/) is a casual diner chain that is open 24 hours and [La Quinta Inn and Suites](http://www.lq.com/) is a hotel chain.\n\nThese two establishments tend to be clustered together, or at least this observation is a joke made famous by Mitch Hedberg.\nIn this lab we explore the validity of this joke and along the way learn some more data wrangling and tips for visualizing spatial data.\n\nThe inspiration for this lab comes from a blog post by John Reiser on his *new jersey geographer* blog.\nYou can read that analysis [here](http://njgeo.org/2014/01/30/mitch-hedberg-and-gis/).\nReiser's blog post focuses on scraping data from Denny's and La Quinta Inn and Suites websites using Python.\nIn this lab we focus on visualization and analysis of these data.\nHowever note that the data scraping was also done in R, and we we will discuss web scraping using R later in the course.\nBut for now we focus on the data that has already been scraped and tidied for you.\n\n# Learning goals\n\n-   Visualising spatial data\n-   Joining data frames\n\n# Getting started\n\nGo to the course GitHub organization and locate your homework repo, clone it in RStudio and open the R Markdown document.\nKnit the document to make sure it compiles without errors.\n\n## Warm up\n\nBefore we introduce the data, let's warm up with some simple exercises.\n\n-   Update the YAML, changing the author name to your name, and **knit** the document.\n-   Commit your changes with a meaningful commit message.\n-   Push your changes to GitHub.\n-   Go to your repo on GitHub and confirm that your changes are visible in your Rmd **and** md files. If anything is missing, commit and push again.\n\n## Packages\n\nWe'll use the **tidyverse** package for much of the data wrangling and visualisation and the data lives in the **dsbox** package.\nThese packages are already installed for you.\nYou can load them by running the following in your Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \nlibrary(dsbox) \n```\n:::\n\n\n## Data\n\nThe datasets we'll use are called `dennys` and `laquinta` from the **dsbox** package.\nNote that these data were scraped from [here](https://locations.dennys.com/) and [here](https://www.lq.com/en/findandbook/hotel-listings.html), respectively.\n\nSince the datasets are distributed with the package, we don't need to load them separately; they become available to us when we load the package.\nYou can find out more about the datasets by inspecting their documentation, which you can access by running `?dennys` and `?laquinta` in the Console or using the Help menu in RStudio to search for `dennys` or `laquinta`.\nYou can also find this information [here](https://rstudio-education.github.io/dsbox/reference/dennys.html) and [here](https://rstudio-education.github.io/dsbox/reference/laquinta.html).\n\nTo help with our analysis we will also use a dataset on US states, which is located in your repository's `data` folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates <- read_csv(\"data/states.csv\")\n```\n:::\n\n\nEach observation in this dataset represents a state, including DC.\nAlong with the name of the state we have the two-letter abbreviation and we have the geographic area of the state (in square miles).\n\n# Exercises\n\n1.  What are the dimensions of the Denny's dataset?\n    (Hint: Use inline R code and functions like `nrow` and `ncol` to compose your answer.) What does each row in the dataset represent?\n    What are the variables?\n\n2.  What are the dimensions of the La Quinta's dataset?\n    What does each row in the dataset represent?\n    What are the variables?\n\nüß∂ ‚úÖ ‚¨ÜÔ∏è Knit, *commit, and push your changes to GitHub with an appropriate commit message. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\nWe would like to limit our analysis to Denny's and La Quinta locations in the United States.\n\n3.  Take a look at the websites that the data come from (linked above).\n    Are there any La Quinta's locations outside of the US?\n    If so, which countries?\n    What about Denny's?\n\n4.  Now take a look at the data.\n    What would be some ways of determining whether or not either establishment has any locations outside the US using just the data (and not the websites).\n    Don't worry about whether you know how to implement this, just brainstorm some ideas.\n    Write down at least one as your answer, but you're welcomed to write down a few options too.\n\nWe will determine whether or not the establishment has a location outside the US using the `state` variable in the `dennys` and `laquinta` datasets.\nWe know exactly which states are in the US, and we have this information in the `states` dataframe we loaded.\n\n5.  Find the Denny's locations that are outside the US, if any. To do so, filter the Denny's locations for observations where `state` is not in `states$abbreviation`. The code for this is given below. Note that the `%in%` operator matches the states listed in the `state` variable to those listed in `states$abbreviation`. The `!` operator means **not**. Are there any Denny's locations outside the US?\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\n\"Filter for `state`s that are not in `states$abbreviation`.\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndennys %>%\n  filter(!(state %in% states$abbreviation))\n```\n:::\n\n\n6.  Add a country variable to the Denny's dataset and set all observations equal to `\"United States\"`. Remember, you can use the `mutate` function for adding a variable. Make sure to save the result of this as `dennys` again so that the stored data frame contains the new variable going forward.\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\nWe don't need to tell R how many times to repeat the character string \"United States\" to fill in the data for all observations, R takes care of that automatically.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndennys %>%\n  mutate(country = \"United States\")\n```\n:::\n\n\n7.  Find the La Quinta locations that are outside the US, and figure out which country they are in.\n    This might require some googling.\n    Take notes, you will need to use this information in the next exercise.\n\n8.  Add a country variable to the La Quinta dataset.\n    Use the `case_when` function to populate this variable.\n    You'll need to refer to your notes from Exercise 7 about which country the non-US locations are in.\n    Here is some starter code to get you going:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaquinta %>%\n  mutate(country = case_when(\n    state %in% state.abb     ~ \"United States\",\n    state %in% c(\"ON\", \"BC\") ~ \"Canada\",\n    state == \"ANT\"           ~ \"Colombia\",\n    ...                      # fill in the rest\n  ))\n```\n:::\n\n\nüß∂ ‚úÖ ‚¨ÜÔ∏è Knit, *commit, and push your changes to GitHub with an appropriate commit message. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\nGoing forward we will work with the data from the United States only.\nAll Denny's locations are in the United States, so we don't need to worry about them.\nHowever we do need to filter the La Quinta dataset for locations in United States.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaquinta <- laquinta %>%\n  filter(country == \"United States\")\n```\n:::\n\n\n9.  Which states have the most and fewest Denny's locations? What about La Quinta? Is this surprising? Why or why not?\n\nNext, let's calculate which states have the most Denny's locations *per thousand square miles*.\nThis requires *joining* information from the frequency tables you created in Exercise 8 with information from the `states` data frame.\n\nFirst, we count how many observations are in each state, which will give us a data frame with two variables: `state` and `n`.\nThen, we join this data frame with the `states` data frame.\nHowever note that the variables in the `states` data frame that has the two-letter abbreviations is called `abbreviation`.\nSo when we're joining the two data frames we specify that the `state` variable from the Denny's data should be matched `by` the `abbreviation` variable from the `states` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndennys %>%\n  count(state) %>%\n  inner_join(states, by = c(\"state\" = \"abbreviation\"))\n```\n:::\n\n\nBefore you move on the the next question, run the code above and take a look at the output.\nIn the next exercise you will need to build on this pipe.\n\n10. Which states have the most Denny's locations per thousand square miles? What about La Quinta?\n\nNext, we put the two datasets together into a single data frame.\nHowever before we do so, we need to add an identifier variable.\nWe'll call this `establishment` and set the value to `\"Denny's\"` and `\"La Quinta\"` for the `dennys` and `laquinta` data frames, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndennys <- dennys %>%\n  mutate(establishment = \"Denny's\")\nlaquinta <- laquinta %>%\n  mutate(establishment = \"La Quinta\")\n```\n:::\n\n\nSince the two data frames have the same columns, we can easily bind them with the `bind_rows` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndn_lq <- bind_rows(dennys, laquinta)\n```\n:::\n\n\nWe can plot the locations of the two establishments using a scatter plot, and color the points by the establishment type.\nNote that the latitude is plotted on the x-axis and the longitude on the y-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dn_lq, mapping = aes(x = longitude, y = latitude, color = establishment)) +\n  geom_point()\n```\n:::\n\n\nThe following two questions ask you to create visualizations.\nThese should follow best practices you learned in class, such as informative titles, axis labels, etc.\nSee <http://ggplot2.tidyverse.org/reference/labs.html> for help with the syntax.\nYou can also choose different themes to change the overall look of your plots, see <http://ggplot2.tidyverse.org/reference/ggtheme.html> for help with these.\n\n11. Filter the data for observations in North Carolina only, and recreate the plot.\n    You should also adjust the transparency of the points, by setting the `alpha` level, so that it's easier to see the overplotted ones.\n    Visually, does Mitch Hedberg's joke appear to hold here?\n\n12. Now filter the data for observations in Texas only, and recreate the plot, with an appropriate `alpha` level.\n    Visually, does Mitch Hedberg's joke appear to hold here?\n\nThat's it for now!\nIn the next lab we will take a more quantitative approach to answering these questions.\n\nüß∂ ‚úÖ ‚¨ÜÔ∏è Knit, *commit, and push your changes to GitHub with an appropriate commit message. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards and review the md document on GitHub to make sure you're happy with the final state of your work.*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}