{
  "hash": "fca6fe4203781f548ffe33989859104d",
  "result": {
    "markdown": "---\ntitle: \"HW 01 - Pet names\"\nsubtitle: \"Meet the toolkit\"\noutput: \n  tufte::tufte_html:\n    css: ../hw.css\n    tufte_variant: \"envisioned\"\n    highlight: pygments\nlink-citations: true\n---\n\n\n\n::: {.cell fig.margin='true'}\n::: {.cell-output-display}\n![Photo by Jovana Askrabic on Unsplash](img/jovana-askrabic-XYIQXLH_v0o-unsplash.jpg){width=80%}\n:::\n:::\n\n\nThe goal of this assignment is to introduce you to R, RStudio, Git, and GitHub, which you'll be using throughout the course both to learn the data science concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n# Getting started\n\n## Prerequisites {data-link=\"Prerequisites\"}\n\nThis assignment assumes that you have reviewed the lectures titled \"Meet the toolkit: Programming\" and \"Meet the toolkit: version control and collaboration\".\nIf you haven't yet done so, please pause and complete the following before continuing.\n\n## Terminology\n\nWe've already thrown around a few new terms, so let's define them before we proceed.\n\n-   **R:** Name of the programming language we will be using throughout the course.\n\n-   **RStudio:** An integrated development environment for R.\n    In other words, a convenient interface for writing and running R code.\n\n-   **Git:** A version control system.\n\n-   **GitHub:** A web platform for hosting version controlled files and facilitating collaboration among users.\n\n-   **Repository:** A Git repository contains all of your project's files and stores each file's revision history.\n    It's common to refer to a repository as a repo.\n\n    -   In this course, each assignment you work on will be contained in a Git repo.\n    -   For individual assignments, only you will have access to the repo. For team assignments, all team members will have access to a single repo where they work collaboratively.\n    -   All repos associated with this course are housed in the course GitHub organization. The organization is set up such that students can only see repos they have access to, but the course staff can see all of them.\n\n## Starting slow\n\nAs the course progresses, you are encouraged to explore beyond what the assignments dictate; a willingness to experiment will make you a much better programmer!\nBefore we get to that stage, however, you need to build some basic fluency in R.\nFirst, we will explore the fundamental building blocks of all of these tools.\n\nBefore you can get started with the analysis, you need to make sure you:\n\n-   have a GitHub account\n\n-   are a member of the course GitHub organization\n\n-   are a member of the course RStudio Cloud space\n\nIf you failed to confirm any of these, it means you have not yet completed the prerequisites for this assignment.\nPlease go back to [Prerequisites] and complete them before continuing the assignment.\n\n# Workflow\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\n**IMPORTANT:** If there is no GitHub repo created for you for this assignment, it means I didn't have your GitHub username as of when I assigned the homework. Please let me know your GitHub username asap, and I can create your repo.\n```\n:::\n\n\nFor each assignment in this course you will start with a GitHub repo that I created for you and that contains the starter documents you will build upon when working on your assignment.\nThe first step is always to bring these files into RStudio so that you can edit them, run them, view your results, and interpret them.\nThis action is called **cloning**.\n\nThen you will work in RStudio on the data analysis, making **commits** along the way (snapshots of your changes) and finally **push** all your work back to GitHub.\n\nThe next few steps will walk you through the process of getting information of the repo to be cloned, cloning your repo in a new RStudio Cloud project, and getting started with the analysis.\n\n### Step 1. Get URL of repo to be cloned\n\n\n::: {.cell fig.margin='true'}\n::: {.cell-output-display}\n![](img/clone-repo-link.png){width=80%}\n:::\n:::\n\n\nOn GitHub, click on the green **Code** button, select **HTTPS** (this might already be selected by default, and if it is, you'll see the text *Use Git or checkout with SVN using the web URL* jas in the image on the right).\nClick on the clipboard icon 📋 to copy the repo URL.\n\n### Step 2. Go to RStudio Cloud\n\nGo to [rstudio.cloud](https://rstudio.cloud/ \"RStudio Cloud\") and then **navigate to the course workspace** via the left sidebar.\nIt's very important that you do this for two reasons:\n\n-   It's only when you're in the course workspace that you'll be able to benefit from R packages I've pre-installed for you so that your project can be configured correctly.\n-   It's only when you're in the course workspace that your usage of RStudio Cloud won't count towards the free usage limits.\n\n\n::: {.cell fig.margin='true'}\n::: {.cell-output-display}\n![](img/course-workspace.png){width=80%}\n:::\n:::\n\n\nBefore you proceed, confirm that you are in the course workspace by checking out what's on your top bar in RStudio Cloud.\n\n### Step 3. Clone the repo\n\nIn RStudio, click on the **down arrow** next to New Project and then choose **New Project from Git Repository**.\n\nIn the pop-up window, **paste the URL** you copied from GitHub, make sure the box for **Add packages from the base project** is checked (it should be, by default) and then click **OK**.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](img/new-project-from-git.png){fig-align='left' width=80%}\n:::\n:::\n\n\n# Hello RStudio!\n\nRStudio is comprised of four panes.\n\n\n::: {.cell fig.fullwidth='true'}\n::: {.cell-output-display}\n![](img/rstudio-anatomy.png){width=80%}\n:::\n:::\n\n\n-   On the bottom left is the Console, this is where you can write code that will be evaluated. Try typing `2 + 2` here and hit enter, what do you get?\n-   On the bottom right is the Files pane, as well as other panes that will come handy as we start our analysis.\n-   If you click on a file, it will open in the editor, on the top left pane.\n-   Finally, the top right pane shows your Environment. If you define a variable it would show up there. Try typing `x <- 2` in the Console and hit enter, what do you get in the **Environment** pane? Importantly, this pane is also where the **Git** interface lives. We will be using that regularly throughout this assignment.\n\n# Warm up\n\nBefore we introduce the data, let's warm up with some simple exercises.\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\nThe top portion of your R Markdown file (between the three dashed lines) is called **YAML**. It stands for \"YAML Ain't Markup Language\". It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n```\n:::\n\n\n## Step 1. Update the YAML\n\nOpen the R Markdown (Rmd) file in your project, change the author name to your name, and knit the document.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/yaml-raw-to-rendered.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Step 2: Commit\n\nThen Go to the **Git pane** in your RStudio.\n\nYou should see that your Rmd (R Markdown) file and its output, your md file (Markdown), are listed there as recently changed files.\n\nNext, click on **Diff**.\nThis will pop open a new window that shows you the **diff**erence between the last committed state of the document and its current state that includes your changes.\nIf you're happy with these changes, click on the checkboxes of all files in the list, and type *\"Update author name\"* in the **Commit message** box and hit **Commit**.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](img/update-author-name-commit.png){fig-align='left' width=80%}\n:::\n:::\n\n\nYou don't have to commit after every change, this would get quite cumbersome.\nYou should consider committing states that are *meaningful to you* for inspection, comparison, or restoration.\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use.\nAs the semester progresses we will let you make these decisions.\n\n## Step 3. Push\n\nNow that you have made an update and committed this change, it's time to push these changes to the web!\nOr more specifically, to your repo on GitHub.\nWhy?\nSo that others can see your changes.\nAnd by others, we mean the course teaching team (your repos in this course are private to you and us, only).\nIn order to push your changes to GitHub, click on **Push**.\n\n\n::: {.cell fig.margin='true'}\n::: {.cell-output-display}\n![](img/ready-to-push.png){width=80%}\n:::\n:::\n\n\nThis will prompt a dialogue box where you first need to enter your user name, and then your password.\nThis might feel cumbersome.\nBear with me... I *will* teach you how to save your password so you don't have to enter it every time.\nBut for this one assignment you'll have to manually enter each time you push in order to gain some experience with it.\n\n**Thought exercise:** Which of the above steps (updating the YAML, committing, and pushing) needs to talk to GitHub?[^hw-01-pet-names-1]\n\n# Packages\n\nR is an open-source language, and developers contribute functionality to R via packages.\nIn this assignment we will use the following packages:\n\n-   **tidyverse**: a collection of packages for doing data analysis in a \"tidy\" way\n-   **openintro**: a package that contains the datasets from OpenIntro resources\n\nWe use the `library()` function to load packages.\nIn your R Markdown document you should see an R chunk labelled `load-packages` which has the necessary code for loading both packages.\nYou should also load these packages in your Console, which you can do by sending the code to your Console by clicking on the **Run Current Chunk** icon (green arrow pointing right icon).\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](img/load-packages-chunk.png){fig-align='left' width=80%}\n:::\n:::\n\n\nNote that these packages also get loaded in your R Markdown environment when you **Knit** your R Markdown document.\n\n# Data\n\nThe city of [Seattle, WA](https://en.wikipedia.org/wiki/Seattle) has an open data portal that includes pets registered in the city.\nFor each registered pet, we have information on the pet's name and species.\nThe data used in this exercise can be found in the **openintro** package, and it's called `seattlepets`.\nSince the dataset is distributed with the package, we don't need to load it separately; it becomes available to us when we load the package.\n\nYou can view the dataset as a spreadsheet using the `View()` function.\nNote that you should not put this function in your R Markdown document, but instead type it directly in the Console, as it pops open a new window (and the concept of popping open a window in a static document doesn't really make sense...).\nWhen you run this in the console, you'll see the following **data viewer** window pop up.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(seattlepets)\n```\n:::\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](img/view-data.png){fig-align='left' width=80%}\n:::\n:::\n\n\nYou can find out more about the dataset by inspecting its documentation (which contains a **data dictionary**, name of each variable and its description), which you can access by running `?seattlepets` in the Console or using the Help menu in RStudio to search for `seattlepets`.\n\n# Exercises\n\n1.  According to the data dictionary, how many pets are included in this dataset?\n\n🧶 ✅ ⬆️ *Write your answer in your R Markdown document under Exercise 1, knit the document, commit your changes with a commit message that says \"Completed Exercise 1\", and push. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\n2.  Again, according to the data dictionary, how many variables do we have for each pet?\n\n🧶 ✅ ⬆️ *Write your answer in your R Markdown document under Exercise 2, knit the document, commit your changes with a commit message that says \"Completed Exercise 2\", and push. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\n3.  What are the three most common pet names in Seattle? To do this you will need to count the frequencies of each pet name and display the results in descending order of frequency so that you can easily see the top three most popular names. The following code does exactly that.\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\nThe two lines of code can be read as \"Start with the seattlepets data frame, and then count the animal_names, and display the results sorted in descending order. The 'and then' in the previous sentence maps to %>%, the pipe operator, which takes what comes before it and plugs it in as the first argument of the function that comes after it.\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseattlepets %>%\n  count(animal_name, sort = TRUE)\n```\n:::\n\n\n🧶 ✅ ⬆️ *Write your answer in your R Markdown document under Exercise 3. In this exercise you will not only provide a written answer but also include some code and output. You should insert the code in the code chunk provided for you, knit the document to see the output, and then write your narrative for the answer based on the output of this function, and knit again to see your narrative, code, and output in the resulting document. Then, commit your changes with a commit message that says \"Completed Exercise 3\", and push. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\nLet's also look to see what the most common pet names are for various species.\nFor this we need to first `group_by()` the `species`, and then do the same counting we did before.\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\nLooks like many of those NAs were cats. Poor unnamed kitties…\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseattlepets %>% \n  group_by(species) %>%\n  count(animal_name, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16,823 × 3\n# Groups:   species [4]\n   species animal_name     n\n   <chr>   <chr>       <int>\n 1 Cat     <NA>          406\n 2 Dog     Lucy          337\n 3 Dog     Charlie       306\n 4 Dog     Bella         249\n 5 Dog     Luna          244\n 6 Dog     Daisy         221\n 7 Dog     Cooper        189\n 8 Dog     Lola          187\n 9 Dog     Max           186\n10 Dog     Molly         186\n# ℹ 16,813 more rows\n```\n:::\n:::\n\n\nBut this output isn't exactly what we wanted.\nWe wanted to know the most common cat and dog names, but there are barely any cats present in this output!\nThis is because there are more dogs than cats in the dataset overall.\nWe can confirm this by counting the various species in the data.\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\n6 pigs in the city? Ok… But we'll continue with cats and dogs.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseattlepets %>%\n  count(species, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  species     n\n  <chr>   <int>\n1 Dog     35181\n2 Cat     17294\n3 Goat       38\n4 Pig         6\n```\n:::\n:::\n\n\nLet's search for the top 5 cat and dog names.\nTo do this, we can use the `slice_max()` function.\nThe first argument in the function is the variable we want to select the highest values of, which is `n`.\nThe second argument is the number of rows to select, which is `n = 5` for the top 5.\nIt may be a bit confusing that both of these are `n`, but this is because we already have a variable called `n` in the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattlepets %>% \n  group_by(species) %>%\n  count(animal_name, sort = TRUE) %>% \n  slice_max(n, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 3\n# Groups:   species [4]\n   species animal_name     n\n   <chr>   <chr>       <int>\n 1 Cat     <NA>          406\n 2 Cat     Luna          111\n 3 Cat     Lucy          102\n 4 Cat     Lily           86\n 5 Cat     Max            83\n 6 Dog     Lucy          337\n 7 Dog     Charlie       306\n 8 Dog     Bella         249\n 9 Dog     Luna          244\n10 Dog     Daisy         221\n# ℹ 43 more rows\n```\n:::\n:::\n\n\n1.  Based on the previous output we can easily identify the most common cat and dog names in Seattle, but the output is sorted by `n` (the frequencies) as opposed to being organized by the `species`. Build on the pipeline to arrange the results so that they're arranged by `species` first, and then `n`. This means you will need to add one more step to the pipeline, and you have two options: `arrange(species, n)` or `arrange(n, species)`. You should try both and decide which one organizes the output by species and then ranks the names in order of frequency for each species.\n\n🧶 ✅ ⬆️ *Write your answer in your R Markdown document under Exercise 4. In this exercise you're asked to complete the code provided for you. You should insert the code in the code chunk provided for you, knit the document to see the output, and then write your narrative for the answer based on the output of this function, and knit again to see your narrative, code, and output in the resulting document. Then, commit your changes with a commit message that says \"Completed Exercise 4\", and push. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\nThe following visualization plots the proportion of dogs with a given name versus the proportion of cats with the same name.\nThe 20 most common cat and dog names are displayed.\nThe diagonal line on the plot is the $x = y$ line; if a name appeared on this line, the name's popularity would be exactly the same for dogs and cats.\n\n\n::: {.cell fig.fullwidth='true'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](hw-01-pet-names_files/figure-html/unnamed-chunk-8-1.png){width=80%}\n:::\n:::\n\n\n1.  What names are more common for cats than dogs? The ones above the line or the ones below the line?\n2.  Is the relationship between the two variables (proportion of cats with a given name and proportion of dogs with a given name) positive or negative? What does this mean in context of the data?\n\n🧶 ✅ ⬆️ *Now is a good time to commit and push your changes to GitHub with an appropriate commit message. Commit and push all changed files so that your Git pane is cleared up afterwards. Make sure that your last push to the repo comes before the deadline. You should confirm that what you committed and pushed are indeed in your repo that we will see by visiting your repo on GitHub.*\n\n[^hw-01-pet-names-1]: Only pushing requires talking to GitHub, this is why you're asked for your password at that point.\n",
    "supporting": [
      "hw-01-pet-names_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}